using Game;
using HOTTGF;
using HOTTUI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace Game
{
    public  class Level
    {
        public static void Level1()
        {
            Teleporteur teleporteur = new Teleporteur(new System.Numerics.Vector2(16, 15), new System.Numerics.Vector2(19, 15));
            Lever lever = new Lever(new System.Numerics.Vector2(20, 15));
            char[,] map = new char[,]
                {
                {'#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#','#', '#', '#', },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#'},
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#'},
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#'},
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '.', '#','#', '.', '.', '.', '#', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '.', '#','#', '.', '.', '.', '#', '.', '.', '.', '#'},
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '.', '#','#', '.', '.', '.', '#', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '#', '#', '#', '#', '.', '#','#', '#', '#', '#', '#', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '#', '@', '.', '#', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', '#', '#', '#', '#', '.', '.','.', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ','#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#'},
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ','#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#','#', '.', '.', '.', '.', '.', '.', '.', '#' },
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
                };
            Player player = new Player(2, 2);
            Console.Clear();
            List<char> list = new List<char>();
            list.Add('#');
            while (true)
            {
                if (lever.IsPressed(player))
                {
                    map[17, 20] = '.';
                    map[18, 15] = '.';
                }
                else if (map[player.Y, player.X] == '@')
                {
                    Console.Clear();
                    break;
                }

                for (int y = 0; y < map.GetLength(0); y++)
                {
                    for (int x = 0; x < map.GetLength(1); x++)
                    {
                        Console.SetCursorPosition(x, y);
                        Console.Write(map[y, x]);
                    }
                }
                lever.Draw(ConsoleColor.Yellow);
                teleporteur.Draw(ConsoleColor.Green);
                teleporteur.Teleport(player);
                player.Draw(ConsoleColor.Blue);
                player.Update(map, list);

            }
            Tools.Whrite.Color_Write(ConsoleColor.DarkGreen, "Congrats you have finish the level!");
        }
        public static void Level2()
        {
            Console.Clear();
            Player player = new Player(2, 3);
            
            char[,] up = new char[,]
            {
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
                {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
                {'#','.','.','.','.','.','.','.','X','.','.','.','.','.','.','.','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','.','.','.','.','.','.','.','O','.','.','.','.','.','.','.','#'},
                {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
                {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}
            };
            char[,] down = new char[,]
            {
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','O','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','X','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}
            };
            TileMap tileMapup = new TileMap(up);
            TileMap tileMapdown = new TileMap(down);
            Lever lever = new Lever(new Vector2(12, 3));
            List<char> list = new List<char>();
            bool isdown = false;
            list.Add('#');
            while (true)
            {
                if (up[player.Y, player.X] == 'X')
                {
                    Console.Clear();
                    isdown = true;
                }
                else if (down[player.Y, player.X] == 'X')
                {
                    Console.Clear();
                    isdown = false;
                }
                if (isdown == true)
                {
                    tileMapdown.DrawUniColor(ConsoleColor.White);
                    player.Draw(ConsoleColor.Blue);
                    player.Update(tileMapdown.chars, list);
                } 
                else 
                {
                    tileMapup.DrawUniColor(ConsoleColor.White);
                    lever.Draw(ConsoleColor.Yellow);
                    player.Draw(ConsoleColor.Blue);
                    player.Update(tileMapup.chars, list);
                    
                }
                if (lever.IsPressed(player) && isdown == false)
                {
                    up[9, 8] = '@';
                }
                else if (up[player.Y, player.X] == '@')
                {
                    Console.Clear();
                    break;
                }

            }
            Tools.Whrite.Color_Write(ConsoleColor.DarkGreen, "Congrats you have finish the level!");
        }
    }
}
